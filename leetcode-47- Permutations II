// Source : https://oj.leetcode.com/problems/permutations-ii/
// Author : wind
// Date   : 2019-01-19

/********************************************************************************** 
* 
* Given a collection of numbers that might contain duplicates, return all possible unique permutations.
* 
* For example,
* [1,1,2] have the following unique permutations:
* [1,1,2], [1,2,1], and [2,1,1].
* 
*               
**********************************************************************************/
solution1:DFS+recrusive
#include "stdafx.h"
#include <iostream>
#include <vector>
using namespace std;

void perm(vector<int>nums,vector<vector<int>> &res, 
	vector<int> &out,int level, vector<int>&visited){
	if (level == nums.size()){
		res.push_back(out);
		return;
	}
	for (int i = 0; i < nums.size(); i++){
		if (visited[i] == 0){
			if (i > 0 && nums[i] == nums[i - 1] && visited[i-1] == 0)continue;//重复的跳过即可
			visited[i] = 1;
			out.push_back(nums[i]);
			perm(nums, res, out, level + 1, visited);
			out.pop_back();
			visited[i] = 0;
		}
	}
}
void permutations(vector<int>nums){
	vector<vector<int>>res;
	vector<int> out, visited(nums.size(), 0);
	perm(nums, res, out, 0, visited);
	cout << "results" << endl;
	for (auto a : res){
		for (int s : a){
			cout << s;
		}
		cout << endl;
	}
}
int main()
{
	permutations(vector<int>{2, 2, 3});
}

solution2：DFS+recrusive+swap
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(),nums.end());
        perm(nums,0,res);
        return res;
    }
    int OK(vector<int>&nums,int begin,int pos){
        for(int i=begin;i<pos;i++){
            if(nums[i]==nums[pos]){
                return 0;
            }
        }
        return 1;
    }
    void perm(vector<int>&nums,int begin,vector<vector<int>>&res){
        if(begin==nums.size()){
            res.push_back(nums);
        }
        for(int i=begin;i<nums.size();i++){
        if(OK(nums,begin,i)){//判断跳过重复元素
            swap(nums[begin],nums[i]);
            perm(nums,begin+1,res);
            swap(nums[i],nums[begin]);
        }
        }
    }
};
