// Source : https://oj.leetcode.com/problems/next-permutation/
// Author : wind
// Date   : 2019-01-19

/********************************************************************************** 
* 
* Implement next permutation, which rearranges numbers into the lexicographically next 
* greater permutation of numbers.
* 
* If such arrangement is not possible, it must rearrange it as the lowest possible order 
* (ie, sorted in ascending order).
* 
* The replacement must be in-place, do not allocate extra memory.
* 
* Here are some examples. Inputs are in the left-hand column and its corresponding outputs 
* are in the right-hand column.
*
*   1,2,3 → 1,3,2
*   3,2,1 → 1,2,3
*   1,1,5 → 1,5,1
*               
**********************************************************************************/
solution:
/*
如1 2 7 4 3 1
到1 3 1 2 4 7
从后往前找到比2大的3，交换得1 3 7 4 2 1，然后对3后边的7 4 2 1（从后往前看是递增序列）反转成1 2 4 7即可。
*/
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i=nums.size()-2;
        while(i>=0&&nums[i+1]<=nums[i])i--;
        if(i<0){
        reverse(nums.begin(),nums.end());
        return;    
        }
        int j=nums.size()-1;
        while(j>=0&&nums[j]<=nums[i]){
            j--;
        }
        swap(nums[i],nums[j]);
        reverse(nums.begin()+i+1,nums.end());
    }
};
